import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.framebuffer.BitmapDataUtil;
import funkin.graphics.framebuffer.FixedBitmapData;
import funkin.graphics.shaders.OverlayBlend;
import funkin.graphics.shaders.RuntimeRainShader;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.graphics.shaders.AdjustColorShader;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import openfl.filters.BlurFilter;
import openfl.filters.ShaderFilter;
import flixel.addons.display.FlxBackdrop;
import funkin.util.FlxTweenUtil;
import openfl.utils.Assets;
import flixel.addons.display.FlxTiledSprite;
import StringTools;

class StrangeAlleywayErectRainStage extends Stage
{
	var rainShader:RuntimeRainShader = new RuntimeRainShader();
	var rainShaderFilter:ShaderFilter;
    var rainDropTimer:Float = 0;
	var rainDropWait:Float = 6;
	var blurFilter:BlurFilter = new BlurFilter(6, 6);

	// as song goes on, these are used to make the rain more intense throught the song
	// these values are also used for the rain sound effect volume intensity!
	var rainShaderStartIntensity:Float;
	var rainShaderEndIntensity:Float;

	var colorShaderBf:AdjustColorShader;
	var colorShaderDad:AdjustColorShader;
	var colorShaderGf:AdjustColorShader;

	var mist0:FlxBackdrop;
	var mist1:FlxBackdrop;
	var mist2:FlxBackdrop;
	var mist3:FlxBackdrop;
	var mist4:FlxBackdrop;
	var mist5:FlxBackdrop;
	var _timer:Float = 0;

   	function new()
	{
		super('strangeAlleyErectRain');
	}
    override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);
		rainShader.scale = FlxG.height / 200; // adjust this value so that the rain looks nice

        FlxG.console.registerObject("rainShader", rainShader);
		switch (PlayState.instance.currentSong.id)
        {
			case "nerves":
				rainShaderStartIntensity = 0.1;
				rainShaderEndIntensity = 0.3;
		}
        rainShader.intensity = rainShaderStartIntensity;
        rainShaderFilter = new ShaderFilter(rainShader);
		FlxG.camera.filters = [rainShaderFilter];
    }
    override function onUpdate(event:UpdateScriptEvent)
	{
		super.onUpdate(event);

		_timer += event.elapsed;
		mist0.y = 660 + (Math.sin(_timer*0.35)*70);
		mist1.y = 500 + (Math.sin(_timer*0.3)*80);
		mist2.y = 540 + (Math.sin(_timer*0.4)*60);
		mist3.y = 230 + (Math.sin(_timer*0.3)*70);
		mist4.y = 170 + (Math.sin(_timer*0.35)*50);
		mist5.y = -80 + (Math.sin(_timer*0.08)*100);

		var remappedIntensityValue:Float = FlxMath.remapToRange(Conductor.instance.songPosition, 0, FlxG.sound.music != null ? FlxG.sound.music.length : 0.0, rainShaderStartIntensity, rainShaderEndIntensity);
		rainShader.intensity = remappedIntensityValue;
		rainShader.updateViewInfo(FlxG.width, FlxG.height, FlxG.camera);
		rainShader.update(event.elapsed);

		if(PlayState.instance.currentStage.getBoyfriend() != null && PlayState.instance.currentStage.getBoyfriend().shader == null) 
		{
			PlayState.instance.currentStage.getBoyfriend().shader = colorShaderBf;
			PlayState.instance.currentStage.getGirlfriend().shader = colorShaderGf;
			PlayState.instance.currentStage.getDad().shader = colorShaderDad;
		}
	}
    override function onGameOver(event:ScriptEvent):Void {
		super.onGameOver(event);
		// Make it so the rain shader doesn't show over the game over screen
		FlxG.camera.filters = [];
	}
	function buildStage()
	{
		super.buildStage();
	
		colorShaderBf = new AdjustColorShader();
		colorShaderDad = new AdjustColorShader();
		colorShaderGf = new AdjustColorShader();
	
		colorShaderBf.brightness = -30;
		colorShaderBf.hue = 12;
		colorShaderBf.contrast = 7;
		colorShaderBf.saturation = 3;
	
		colorShaderGf.brightness = -30;
		colorShaderGf.hue = -9;
		colorShaderGf.contrast = -4;
		colorShaderGf.saturation = 0;
	
		//colorShaderDad.brightness = -10;
		colorShaderDad.hue = -20;
		colorShaderDad.contrast = -13;
		colorShaderDad.saturation = 5;

		mist0 = new FlxBackdrop(Paths.image('stages/erect/mistMid'), 0x01);
		mist0.setPosition(-650, -100);
		mist0.scrollFactor.set(1.2, 1.2);
		mist0.zIndex = 2000;
        mist0.blend = 0;
		mist0.color = 0xFF5c5c5c;
		mist0.alpha = 0.6;
		mist0.velocity.x = 172;

		PlayState.instance.currentStage.add(mist0);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist1 = new FlxBackdrop(Paths.image('stages/erect/mistMid'), 0x01);
		mist1.setPosition(-650, -100);
		mist1.scrollFactor.set(1.1, 1.1);
		mist1.zIndex = 2000;
        mist1.blend = 0;
		mist1.color = 0xFF5c5c5c;
		mist1.alpha = 0.6;
		mist1.velocity.x = 150;

		PlayState.instance.currentStage.add(mist1);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist2 = new FlxBackdrop(Paths.image('stages/erect/mistBack'), 0x01);
		mist2.setPosition(-650, -100);
		mist2.scrollFactor.set(1.2, 1.2);
		mist2.zIndex = 2001;
        mist2.blend = 0;
		mist2.color = 0xFF5c5c5c;
		mist2.alpha = 0.8;
		mist2.velocity.x = -80;

		PlayState.instance.currentStage.add(mist2);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist3 = new FlxBackdrop(Paths.image('stages/erect/mistMid'), 0x01);
		mist3.setPosition(-650, -100);
		mist3.scrollFactor.set(0.95, 0.95);
		mist3.zIndex = 900;
   	    mist3.blend = 0;
		mist3.color = 0xFF5c5c5c;
		mist3.alpha = 0.5;
		mist3.velocity.x = -50;
		mist3.scale.set(0.8, 0.8);

		PlayState.instance.currentStage.add(mist3);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist4 = new FlxBackdrop(Paths.image('stages/erect/mistBack'), 0x01);
		mist4.setPosition(-650, -100);
		mist4.scrollFactor.set(0.8, 0.8);
		mist4.zIndex = 800;
   	    mist4.blend = 0;
		mist4.color = 0xFF5c5c5c;
		mist4.alpha = 1;
		mist4.velocity.x = 40;
		mist4.scale.set(0.7, 0.7);

		PlayState.instance.currentStage.add(mist4);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist5 = new FlxBackdrop(Paths.image('stages/erect/mistMid'), 0x01);
		mist5.setPosition(-650, -100);
		mist5.scrollFactor.set(0.5, 0.5);
		mist5.zIndex = 700;
   	    mist5.blend = 0;
		mist5.color = 0xFF5c5c5c;
		mist5.alpha = 1;
		mist5.velocity.x = 20;
		mist5.scale.set(1.1, 1.1);

		PlayState.instance.currentStage.add(mist5);
		PlayState.instance.currentStage.refresh(); // Apply z-index.
	
		//getNamedProp('smokey').blend = 0;
	
	}
	override function onSongRetry(event:ScriptEvent):Void {
		super.onSongRetry(event);
		// Make it so the rain shader doesn't show over the game over screen
		// FlxG.camera.setFilters([rainShaderFilter]);

		//resetStageValues();
		FlxG.camera.filters = [rainShaderFilter];
	}
}